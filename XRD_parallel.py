"""
Python3 code generated by Gerard Novell-Leruth
The code read the geometry of a Gromacs file (.gro) and compute the  XRD pattern that use the Debye's formula with a
thermal vibration of atoms is introduced in a damping exponent factor (Debay-Waller factor). The angular dependency of
geometrical and polarization factors are expressed as suggested by Iwasa et al.
The atomic scattering factors were calculated as in are proportioned by the article of Waasmaier et al.
The code use a multiprocesor properties to accelerate the simulation of X-Ray Diffraction powder.
"""
import numpy as np
from math import exp, pi, sin, sqrt, cos, acos
import sys
from multiprocessing import Pool

#Table (1) of
#D. WAASMAIER AND A. KIRFEL, Acta Cryst. (1995). A51, 416-431
waasmaier = {
     #       a1         b1         a2         b2         a3         b3          a4         b4         a5         b5         c
     'C': [ 2.657506, 14.780758,  1.078079,  0.776775,  1.490909, 42.086843, -4.241070,  -0.000294,  0.713791, 0.239535,   4.297983],
     'N': [11.893780,  0.000158,  3.277479, 10.232723,  1.858092, 30.344690,  0.858927,   0.656065,  0.912985, 0.217287, -11.804902],
     'O': [ 2.960427, 14.182259,  2.5088111, 5.936858,  0.637053,  0.112726,  0.722838,  34.958481,  1.142756, 0.390240,   0.027014],
     'P': [ 1.950541,  0.908139,  4.146930, 27.044953,  1.494560,  0.071280,  1.522042,  67.520190,  5.729711, 1.981173,   0.155233],
     'S': [ 6.372157,  1.514347,  5.154568, 22.092528,  1.473732,  0.061373,  1.635073,  55.445176,  1.209372, 0.646925,   0.154722],
    'Cl': [ 1.446071,  0.052357,  6.870609,  1.193165,  6.151801, 18.343416,  1.750347,  46.398394,  0.634168, 0.401005,   0.146773],
    'Ni': [13.521865,  4.077277,  6.947285,  0.286763,  3.866028, 14.622634,  2.135900,  71.966078,  4.284731, 0.004437,  -2.762697],
    'Cu': [14.014192,  3.738280,  4.784577,  0.003744,  5.056806, 13.034982,  1.457971,  72.554793,  6.932996, 0.265666,  -3.774477],
    'Pd': [ 6.121511,  0.062549,  4.784063,  0.784031, 16.631683,  8.751391,  4.318258,  34.489983, 13.246773, 0.784031,   0.883099],
    'Ag': [ 6.073874,  0.055333, 17.155437,  7.896512,  4.173344, 28.443739,  0.852238, 110.376108, 17.988685, 0.716809,   0.756603],
    'Pt': [31.273891,  1.316992, 18.445441,  8.797154, 17.063745,  0.124741,  5.555933,  40.177994,  1.575270, 1.316997,   4.050394],
    'Au': [16.777389,  0.122737, 19.317156,  8.621570, 32.979682,  1.256902,  5.595453,  38.008821, 10.576854, 0.000601,  -6.279078],
    'Al': [ 4.730796,  3.628931,  2.313951, 43.051166,  1.541980,  0.095960,  1.117564, 108.932389,  3.154754, 1.555918,   0.139509],
    'Zn': [14.741002,  3.388232,  6.907748,  0.243315,  4.642337, 11.903689,  2.191766,  63.312130, 38.424042, 0.000397, -36.915828],
}
# Common Wavelengs for the XRD simulation
wavelengths = {
    'CuKa1': 1.5405981,
    'CuKa2': 1.54443,
    'CuKb1': 1.39225,
    'WLa1': 1.47642,
    'WLa2': 1.48748
}

#Read a .gro file
def lectura_file(arxiu):
    xyz_list = []
    type_at = []
    lista_w = []
    archivo = open(arxiu, 'rt')
    counter_linea = 0
    for linea in archivo:
        if counter_linea == 0 :
            linea_1 = linea
        if counter_linea == 1 :
            final = int(linea)
            linea_2 = linea
        if counter_linea > 1 :
            XX,YY,ZZ = linea[20:44].split()
            atomo  = linea[8:15].split()
# Filter the metalic atoms
            if atomo[0] == 'AL' :
                xyz_list.append([XX,YY,ZZ])
                type_at.append('Al')
                lista_w.append(waasmaier['Al'])
            elif 'ZN' in atomo[0] :
                xyz_list.append([XX,YY,ZZ])
                type_at.append('Zn')
                lista_w.append(waasmaier['Zn'])
            elif 'O' in atomo[0] :
                xyz_list.append([XX,YY,ZZ])
                type_at.append('O')
                lista_w.append(waasmaier['O'])
            elif 'H' in atomo[0] :
                continue
        counter_linea += 1
    archivo.close()
    return(xyz_list,lista_w)

def wai(m_f,s):
    m_F=np.zeros((len(m_f),6),float)
    for i in range(5):
        m_f[::,2*i+1]=np.exp(-m_f[:,2*i+1]*s**2)
        m_F[::,i]=m_f[:,2*i]*m_f[:,2*i+1]
    m_F[::,5]=m_f[:,10]
    return(np.sum(m_F,axis=1))
# Calculation of intensity
def intesidad(x):
    m_d = np.linalg.norm(matriz_XYZ-matriz_XYZ[x],axis=1)*10
#    int1 = np.sum(m_fa[x]*m_fa*np.sinc(2*s*m_d))
    int = np.vdot(m_fa[x]*m_fa,np.sinc(2*s*m_d))
    return(int)


###################################################3
# introduction of .gro file
arxiu = sys.argv[1]
# factors to simulate the XRD
damping = 0.04
alpha = 1.01
wavelength=1.54056
# Range of TwoTheta for the simulation
twoTheta=np.arange(5,20,0.02)

xyz_list,lista_wai = lectura_file(arxiu)
matriz_XYZ = np.array(xyz_list,float)
matriz_wai = np.array(lista_wai,float)
result = []

for i in twoTheta:
    s=2*sin(i/2.0*pi/180)/wavelength
    pre=exp(-damping*s*s/2.)
    pre *= cos(i/2.*pi/180) / (1. + alpha * cos(i*pi/180)**2)
    m_fa = wai(matriz_wai, s)
    Int=[]
    if __name__ == '__main__':
        pool = Pool()
        Int = pool.map(intesidad,range(len(matriz_XYZ)))
        pool.close()
    I=pre*np.sum(Int)
# print the result in screen 
    print(str(i)+'   '+str(I))
